options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   NODE_EXTENDS="BaseNode";
   STATIC=false;
}

PARSER_BEGIN(ExpressionParser)

package edu.wallawalla.cs.cptr354.visitor;

public class ExpressionParser {

  public static void main(String args[]) throws Exception {
    ExpressionParser parser = new ExpressionParser(System.in);
    ASTstart expr=parser.start();
    ExpressionVisitor v=new ExpressionVisitor();
    expr.jjtAccept(v,null);
  }
}

PARSER_END(ExpressionParser)

SKIP :
{
	" " 
	|"\t"
	|"\n"
	|"\r"
}

TOKEN:
{
	    <NUMBER: (["0"-"9"])* (".")? (["0"-"9"])+ >
    |   <WHILE: "while">
    |   <AND: "and">
    |   <LOOP: "loop">
    |   <NOT: "not">
    |   <EXIT: "exit">
    |   <WHEN:  "when">
    |   <EXITWHEN: <EXIT>" "<WHEN>>
    |   <EQUAL: "=">
    |   <NOTEQUAL: "/=">
    |   <GREATERTHAN: ">">
    |   <LESSTHAN: "<">
    |   <GREATERTHANEQUAL: ">=">
    |   <LESSTHANEQUAL: "<=">
    |   <QUOTE: "\"">
	|	<PLUS: "+">
	|	<MINUS: "-">
    |   <MULTIPLY: "*">
    |   <DIVIDE: "/"> 
	|	<DEBUG: "DEBUG">
	|	<PRINT: "Put_Line">
    |   <PUT: "Put">
    |   <IF: "if">
    |   <THEN: "then">
    |   <ELSE: "else">
    |   <ELSIF: "elsif">
    |   <END: "end">
    |   <ENDIF: <END>" "<IF>>
    |   <SQRT: "sqrt">
    |   <COLON: ":">
    |   <OF: "of">
    |   <LENGTH: "length">
    |   <ACCESSOR: ".">
    |   <TYPE: "type">
    |   <ARRAY:  "array">
	|	<VARIABLE: ["a"-"z","A"-"Z"](["_","a"-"z","A"-"Z","0"-"9"])*>
    |   <COMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>	
}

ASTstart start() #start:
{}
{
  manyStatements()
  { return jjtThis; }
}
void manyStatements() #manyStateExpr:
{}
{
   (statement())+   
}

void statement():
{}
{
	(
		assignmentStatement()
        | ifStatement()
        | loopStatement()
		| debug()
		| print()
	)";"
    (<COMMENT>)?
    | <COMMENT>
}

void loopStatement():
{}
{
    whileLoop()
}

void whileLoop() #whileExpr:
{}
{
    <WHILE>expression()<LOOP>manyStatements()<END><LOOP>
}

void assignmentStatement():
{}
{
  LOOKAHEAD(2)
 identifier() <COLON> <ARRAY>  ":=" listexpression()#Statement(2)
 | LOOKAHEAD(2)
 identifier()":="expression()#Statement(2)
 | identifier()"(" numberExpression() ")" ":=" expression() #ListAssignmentStatement(3)
}

void listexpression() #listexpr:
{}
{
     "("  expression()( "," expression())*  ")"
}

void ifStatement() #ifStatement:
{}
{
    <IF> expression() <THEN> manyStatements() 
    (<ELSIF> expression() <THEN> manyStatements())*
    (<ELSE> manyStatements())? <ENDIF>
}

void debug():
{}
{
	<DEBUG>#DebugExpr
}

void print():
{}
{
	<PRINT>expression()#PrintExpr(1)
}

void identifier() :
{}
{
	<VARIABLE>
	{
		jjtThis.data.put("name",token.image);
	}#Variable
}

void expression():
{}
{
    booleanExpression()
}

void booleanExpression():
{}
{
        additiveExpression()
        ( <EQUAL> additiveExpression()#EqualExpr(2)
        | <NOTEQUAL> additiveExpression()#NotExpr(2)
        | <GREATERTHAN> additiveExpression()#GreatExpr(2)
        | <LESSTHAN> additiveExpression()#LessExpr(2)
        | <GREATERTHANEQUAL> additiveExpression()#GreaterExpr(2)
        | <LESSTHANEQUAL> additiveExpression()#LesserExpr(2)
    )*
}

void additiveExpression() :
{}
{
        multiplyExpression()
        (<PLUS> multiplyExpression()#AddExpr(2)
        | <MINUS> multiplyExpression()#SubtractionExpr(2)
    )*
}

void multiplyExpression() :
{}
{
	unaryExpression()
	(
	 <MULTIPLY> unaryExpression()#MultiplyExpr(2)
	 | <DIVIDE> unaryExpression()#DivideExpr(2)
	)*
}

void unaryExpression() :
{}
{
	<MINUS> numberExpression()#NegateExpr(1)
    | numberExpression()
    | sqrtExpression()#SQRTExpr(1)
    | parenthesisExpression()
}

void sqrtExpression():
{}
{
    <SQRT>"(" expression()")"
}

void parenthesisExpression() :
{}
{
    "(" expression() ")"
}

void numberExpression() :
{}
{
	LOOKAHEAD(2)
	<VARIABLE> { jjtThis.data.put("name",token.image); } #Variable
	parenthesisExpression() #listVariableValue(1)
	| LOOKAHEAD(2) 
    <VARIABLE> { jjtThis.data.put("name",token.image); } #Variable
    <ACCESSOR><LENGTH> #lengthexpr
    |
    <NUMBER>
	{ 
		jjtThis.data.put("value",new Double(Double.parseDouble(token.image)));
	}#Number
    | ( <VARIABLE> { jjtThis.data.put("name",token.image); } #Variable ) #VariableValue

}
